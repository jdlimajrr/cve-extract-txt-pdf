import re
import sys
import PyPDF2
from collections import defaultdict

def read_file(file_path):
    if file_path.endswith(".txt"):
        with open(file_path, "r") as file:
            content = file.read()
    elif file_path.endswith(".pdf"):
        with open(file_path, "rb") as file:
            pdf_reader = PyPDF2.PdfReader(file)
            content = ""
            for page in range(len(pdf_reader.pages)):
                content += pdf_reader.pages[page].extract_text()
    else:
        raise ValueError("Unsupported file format. Only .txt and .pdf files are supported.")
    return content

def write_result_to_file(result, output_file):
    with open(output_file, "w") as file:
        for server, server_vulnerabilities in result.items():
            file.write(f"Server: {server}\n\n")
            for (solution, patch_info), vulnerabilities in server_vulnerabilities.items():
                file.write(f"  Solution: {solution}\n  Patch Information: {patch_info}\n  Vulnerabilities:\n")
                for vulnerability in vulnerabilities:
                    for key, value in vulnerability.items():
                        file.write(f"    {key}: {value}\n")
                    file.write("\n")

def extract_vulnerability_details(text):
    server_pattern = re.compile(r"Vulnerability Details - (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}) - (.*?)\n")
    cve_pattern = re.compile(r"CVE CVE-(\d{4}-\d+)")
    cvss_v3_pattern = re.compile(r"CVSS V3 (\d\.\d)")
    description_pattern = re.compile(r"Description (.*?)\n")
    solution_pattern = re.compile(r"Solution (.*?)\nCategory (.*?)\nPatch Information (.*?)\n")

    servers = server_pattern.findall(text)
    server_dict = {ip: name for ip, name in servers}
    cves = cve_pattern.findall(text)
    cvss_v3_scores = cvss_v3_pattern.findall(text)
    descriptions = description_pattern.findall(text)
    solutions = solution_pattern.findall(text)

    grouped_vulnerabilities = defaultdict(lambda: defaultdict(list))

    for i, (solution, category, patch_info) in enumerate(solutions):
        cve_start_index = text.index(cves[i])
        cve_end_index = cve_start_index + len(cves[i]) + 13  # Add the length of "CVE CVE-XXXX-XXXX"
        server_ips = [ip for ip in server_dict.keys() if ip in text[:cve_start_index]]
        server_ip = max(server_ips, key=lambda x: text[:cve_start_index].rindex(x))

        current_server = server_dict[server_ip]

        vulnerability = {
            "CVE": cves[i],
            "CVSS V3": cvss_v3_scores[i],
            "Description": descriptions[i]
        }

        grouped_vulnerabilities[current_server][(solution, patch_info)].append(vulnerability)
        text = text[:cve_start_index] + " " * (cve_end_index - cve_start_index) + text[cve_end_index:]

    return grouped_vulnerabilities

if __name__ == "__main__":
    input_file = sys.argv[1]
    output_file = "vulnerability_details_by_server.txt"

    text = read_file(input_file)
    vulnerability_details = extract_vulnerability_details(text)
    write_result_to_file(vulnerability_details, output_file)
    print(f"Result saved to {output_file}")

